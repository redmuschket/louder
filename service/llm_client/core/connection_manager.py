from fastapi import WebSocket
from typing import Dict, List, Deque, Optional
from collections import deque
import json
import asyncio
from datetime import datetime, timedelta
from core.logger import Logger

logger = Logger.get_logger(__name__)


class BufferedMessage:
    def __init__(self, data: dict, timestamp: Optional[datetime] = None):
        self.data = data
        self.timestamp = timestamp or datetime.now()

    def to_dict(self):
        return {
            "data": self.data,
            "timestamp": self.timestamp.isoformat()
        }

class ConnectionManager:
    def __init__(self, max_buffer_size: int = 50, message_ttl: int = 3600):
        self.active_connections: Dict[str, List[WebSocket]] = {}
        self.message_buffers: Dict[str, Deque[BufferedMessage]] = {}
        self.max_buffer_size = max_buffer_size
        self.message_ttl = message_ttl  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self._lock = asyncio.Lock()

    async def connect(self, chat_id: str, websocket: WebSocket):
        async with self._lock:
            logger.debug(f"[CONNECT] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è chat_id={chat_id}")

            if chat_id not in self.active_connections:
                self.active_connections[chat_id] = []
                logger.debug(f"[CONNECT] –î–ª—è chat_id={chat_id} —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

            self.active_connections[chat_id].append(websocket)
            logger.debug(
                f"[CONNECT] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è {chat_id}: {len(self.active_connections[chat_id])}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –î–û —Ñ–ª–∞—à–∏–Ω–≥–∞
            buffer_size = len(self.message_buffers.get(chat_id, []))
            logger.debug(f"[CONNECT] –ü–µ—Ä–µ–¥ flush: –±—É—Ñ–µ—Ä –¥–ª—è {chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {buffer_size} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –í—ã–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await self.print_active_connections()

            # –ü—Ä–æ–±—É–µ–º —Å–±—Ä–æ—Å–∏—Ç—å –±—É—Ñ–µ—Ä
            try:
                await self._flush_buffer(chat_id)
            except Exception as e:
                logger.error(f"[CONNECT] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è flush –±—É—Ñ–µ—Ä–∞ –¥–ª—è {chat_id}: {e}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –ü–û–°–õ–ï —Ñ–ª–∞—à–∏–Ω–≥–∞
            buffer_size_after = len(self.message_buffers.get(chat_id, []))
            logger.debug(f"[CONNECT] –ü–æ—Å–ª–µ flush: –±—É—Ñ–µ—Ä –¥–ª—è {chat_id} —Å–æ–¥–µ—Ä–∂–∏—Ç {buffer_size_after} —Å–æ–æ–±—â–µ–Ω–∏–π")

            logger.debug(f"[CONNECT] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è chat_id={chat_id}")

    async def disconnect(self, chat_id: str, websocket: WebSocket):
        async with self._lock:
            if chat_id in self.active_connections:
                self.active_connections[chat_id].remove(websocket)
                if not self.active_connections[chat_id]:
                    del self.active_connections[chat_id]
            await self.print_active_connections()

    async def send_message(self, chat_id: str, message: dict):
        try:
            logger.debug(f"Sending message to {chat_id}")
            success = await self._try_send_to_active_connections(chat_id, message)
            if not success:
                await self._add_to_buffer(chat_id, message)

        except Exception as e:
            logger.error(f"Error in send_message: {e}")

    async def _try_send_to_active_connections(self, chat_id: str, message: dict) -> bool:
        chat_id = str(chat_id)
        try:
            logger.debug(f"Trying to send message to {chat_id}, message: {str(message)}")
            """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö"""
            connections = self.active_connections.get(chat_id)
            if not connections:
                logger.debug(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è chat_id: {chat_id}")
                return False

            success = False
            working_connections = []

            for connection in connections:
                try:
                    await connection.send_json(message)
                    success = True
                    working_connections.append(connection)
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: {connection}, {chat_id}")
                except Exception as e:
                    logger.debug(f"Connection failed for {chat_id}: {str(e)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ
            if len(working_connections) != len(connections):
                if working_connections:
                    self.active_connections[chat_id] = working_connections
                else:
                    del self.active_connections[chat_id]

            return success

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    async def _add_to_buffer(self, chat_id: str, message: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
        if chat_id not in self.message_buffers:
            self.message_buffers[chat_id] = deque(maxlen=self.max_buffer_size)

        buffered_message = BufferedMessage(message)
        self.message_buffers[chat_id].append(buffered_message)
        logger.debug(f"Buffered message for {chat_id}. Buffer size: {len(self.message_buffers[chat_id])}")

    async def _flush_buffer(self, chat_id: str):
        try:
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
            if chat_id not in self.message_buffers or not self.message_buffers[chat_id]:
                return

            logger.debug(f"Flushing buffer for {chat_id} ({len(self.message_buffers[chat_id])} messages)")

            # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._clean_old_messages(chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
            successful_messages = 0
            buffer = self.message_buffers[chat_id]

            while buffer:
                message = buffer[0]  # –°–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º –ø–æ–∫–∞

                if await self._try_send_to_active_connections(chat_id, message.data):
                    # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - —É–¥–∞–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
                    buffer.popleft()
                    successful_messages += 1
                else:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                    break

            logger.debug(f"Flushed {successful_messages} messages for {chat_id}")

            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not buffer:
                del self.message_buffers[chat_id]
        except Exception as e:
            logger.error(f"Failed to flush buffer for {chat_id}: {e}")

    async def _clean_old_messages(self, chat_id: str):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        if chat_id not in self.message_buffers:
            return

        now = datetime.now()
        initial_count = len(self.message_buffers[chat_id])

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–µ TTL
        self.message_buffers[chat_id] = deque(
            (msg for msg in self.message_buffers[chat_id]
             if (now - msg.timestamp).total_seconds() <= self.message_ttl),
            maxlen=self.max_buffer_size
        )

        removed_count = initial_count - len(self.message_buffers[chat_id])
        if removed_count > 0:
            logger.debug(f"Removed {removed_count} expired messages from {chat_id} buffer")

    async def print_active_connections(self):
        try:
            if not self.active_connections:
                logger.debug("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            else:
                logger.debug("üîå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                for key, websockets in self.active_connections.items():
                    logger.debug(f"  {key}: {len(websockets)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

            if self.message_buffers:
                logger.debug("üì¶ –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                for chat_id, buffer in self.message_buffers.items():
                    logger.debug(f"  {chat_id}: {len(buffer)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    logger.debug(f"buffer: {buffer}")
        except Exception as e:
            logger.error("–ï–±–∞–Ω—å")

    def get_buffer_stats(self, chat_id: str) -> dict:
        if chat_id in self.message_buffers:
            return {
                "message_count": len(self.message_buffers[chat_id]),
                "oldest_message": self.message_buffers[chat_id][0].timestamp if self.message_buffers[chat_id] else None,
                "newest_message": self.message_buffers[chat_id][-1].timestamp if self.message_buffers[chat_id] else None
            }
        return {"message_count": 0}

connection_manager = ConnectionManager()

def get_connection_manager():
    return connection_manager